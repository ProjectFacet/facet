# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.contrib.postgres.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('editorial', '0027_auto_20171012_2329'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentLicense',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.TextField(help_text=b'Name for the license.')),
                ('terms', models.TextField(help_text=b'Content of the terms.', blank=True)),
                ('upload', models.FileField(null=True, upload_to=b'license/%Y/%m/%d/', blank=True)),
                ('organization', models.ForeignKey(help_text=b'Organization that owns this license.', to='editorial.Organization')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Content License',
                'verbose_name_plural': 'Content Licenses',
            },
        ),
        migrations.CreateModel(
            name='Facet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('original', models.BooleanField(default=True, help_text=b'Was this facet originally created by a user from this organization?')),
                ('creation_date', models.DateTimeField(help_text=b'Day facet was created.', auto_now_add=True)),
                ('name', models.TextField(help_text=b'Internal name for facet.')),
                ('headline', models.TextField(help_text=b'Headline of the facet')),
                ('description', models.TextField(help_text=b'Description of the facet.', blank=True)),
                ('content', models.TextField(help_text=b'Content of the facet.', blank=True)),
                ('status', models.CharField(help_text=b'Facet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('update_notes', models.TextField(help_text=b'Text commenting regarding any updates or corrections made to the facet.', blank=True)),
                ('excerpt', models.TextField(help_text=b'Excerpt from the facet.', blank=True)),
                ('dateline', models.CharField(help_text=b'Where and when the facet was created.', max_length=150, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the facet.', blank=True)),
                ('topic_code', models.CharField(help_text=b'Unique code as needed to designate topic or coverage.', max_length=75, blank=True)),
                ('internal_code', models.CharField(help_text=b'Unique code as needed for ingest sytems or internal use. Use as needed.', max_length=75, blank=True)),
                ('length', models.CharField(help_text=b'Length of facet for audio or video.', max_length=75, blank=True)),
                ('wordcount', models.CharField(help_text=b'Wordcount for text-based facets.', max_length=75, blank=True)),
                ('related_links', models.TextField(help_text=b'Relevant links that can be included with the facet.', blank=True)),
                ('github_link', models.URLField(help_text=b'Link to code for any custom feature.', max_length=300, blank=True)),
                ('source', models.TextField(help_text=b'List of sources in the facet.', blank=True)),
                ('edit_notes', models.TextField(help_text=b'Information regarding allowable extent of editing and suggestions for specific kinds of edits.', blank=True)),
                ('pronunciations', models.TextField(help_text=b'Information about pronouncing names or potentially difficult words.', blank=True)),
                ('sponsors', models.TextField(help_text=b'Sponsors or underwriters if need to indicate any.', blank=True)),
                ('pull_quotes', models.TextField(help_text=b'List of quotes and attributions to be used as pull quotes.', blank=True)),
                ('embeds', models.TextField(help_text=b'The necessary information to embed something like a Tweet, FB post, map or video.', blank=True)),
                ('pushed_to_wp', models.BooleanField(default=False, help_text=b'Whether the facet has been pushed to the organization WordPress site.')),
                ('sidebar_content', models.TextField(help_text=b'Content separate from body text meant for sidebar or inset presentation.', blank=True)),
                ('series_title', models.TextField(help_text=b'Title of the video series.', blank=True)),
                ('episode_number', models.CharField(help_text=b'If the video is part of a series, the episode number.', max_length=75, blank=True)),
                ('usage_rights', models.TextField(help_text=b'Information regarding the usage of the video if shared.', blank=True)),
                ('tape_datetime', models.DateTimeField(help_text=b'Tape date.', null=True, blank=True)),
                ('locations', models.TextField(help_text=b'Shoot locations.', blank=True)),
                ('custom_one', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('custom_two', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('custom_three', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('custom_four', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('custom_five', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('audio_assets', models.ManyToManyField(to='editorial.AudioAsset', blank=True)),
                ('content_license', models.ForeignKey(related_name='facetlicense', blank=True, to='editorial.ContentLicense')),
                ('credit', models.ManyToManyField(help_text=b'The full user name(s) to be listed as the credit for the facet.', related_name='facetcredit', to=settings.AUTH_USER_MODEL, blank=True)),
                ('document_assets', models.ManyToManyField(to='editorial.DocumentAsset', blank=True)),
                ('editor', models.ManyToManyField(help_text=b'The full user name(s) to be listed as the editor(s) for the facet.', related_name='faceteditor', to=settings.AUTH_USER_MODEL, blank=True)),
                ('image_assets', models.ManyToManyField(to='editorial.ImageAsset', blank=True)),
                ('organization', models.ForeignKey(help_text=b'Organization that owns this facet.', to='editorial.Organization')),
                ('owner', models.ForeignKey(related_name='facetowner', to=settings.AUTH_USER_MODEL)),
                ('producer', models.ForeignKey(related_name='facetproducer', blank=True, to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(related_name='facetstory', to='editorial.Story')),
            ],
            options={
                'verbose_name': 'Facet',
                'verbose_name_plural': 'Facets',
            },
        ),
        migrations.CreateModel(
            name='FacetContributor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_role', models.CharField(help_text=b'What did the user do?', max_length=255)),
                ('facet', models.ForeignKey(to='editorial.Facet')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalFacet',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('original', models.BooleanField(default=True, help_text=b'Was this facet originally created by a user from this organization?')),
                ('creation_date', models.DateTimeField(help_text=b'Day facet was created.', editable=False, blank=True)),
                ('name', models.TextField(help_text=b'Internal name for facet.')),
                ('headline', models.TextField(help_text=b'Headline of the facet')),
                ('description', models.TextField(help_text=b'Description of the facet.', blank=True)),
                ('content', models.TextField(help_text=b'Content of the facet.', blank=True)),
                ('status', models.CharField(help_text=b'Facet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('update_notes', models.TextField(help_text=b'Text commenting regarding any updates or corrections made to the facet.', blank=True)),
                ('excerpt', models.TextField(help_text=b'Excerpt from the facet.', blank=True)),
                ('dateline', models.CharField(help_text=b'Where and when the facet was created.', max_length=150, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the facet.', blank=True)),
                ('topic_code', models.CharField(help_text=b'Unique code as needed to designate topic or coverage.', max_length=75, blank=True)),
                ('internal_code', models.CharField(help_text=b'Unique code as needed for ingest sytems or internal use. Use as needed.', max_length=75, blank=True)),
                ('length', models.CharField(help_text=b'Length of facet for audio or video.', max_length=75, blank=True)),
                ('wordcount', models.CharField(help_text=b'Wordcount for text-based facets.', max_length=75, blank=True)),
                ('related_links', models.TextField(help_text=b'Relevant links that can be included with the facet.', blank=True)),
                ('github_link', models.URLField(help_text=b'Link to code for any custom feature.', max_length=300, blank=True)),
                ('source', models.TextField(help_text=b'List of sources in the facet.', blank=True)),
                ('edit_notes', models.TextField(help_text=b'Information regarding allowable extent of editing and suggestions for specific kinds of edits.', blank=True)),
                ('pronunciations', models.TextField(help_text=b'Information about pronouncing names or potentially difficult words.', blank=True)),
                ('sponsors', models.TextField(help_text=b'Sponsors or underwriters if need to indicate any.', blank=True)),
                ('pull_quotes', models.TextField(help_text=b'List of quotes and attributions to be used as pull quotes.', blank=True)),
                ('embeds', models.TextField(help_text=b'The necessary information to embed something like a Tweet, FB post, map or video.', blank=True)),
                ('pushed_to_wp', models.BooleanField(default=False, help_text=b'Whether the facet has been pushed to the organization WordPress site.')),
                ('sidebar_content', models.TextField(help_text=b'Content separate from body text meant for sidebar or inset presentation.', blank=True)),
                ('series_title', models.TextField(help_text=b'Title of the video series.', blank=True)),
                ('episode_number', models.CharField(help_text=b'If the video is part of a series, the episode number.', max_length=75, blank=True)),
                ('usage_rights', models.TextField(help_text=b'Information regarding the usage of the video if shared.', blank=True)),
                ('tape_datetime', models.DateTimeField(help_text=b'Tape date.', null=True, blank=True)),
                ('locations', models.TextField(help_text=b'Shoot locations.', blank=True)),
                ('custom_one', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('custom_two', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('custom_three', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('custom_four', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('custom_five', models.TextField(help_text=b'User-defined field.', blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('content_license', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.ContentLicense', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('organization', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True)),
                ('owner', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('producer', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('story', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Facet',
            },
        ),
        migrations.AddField(
            model_name='facet',
            name='team',
            field=models.ManyToManyField(help_text=b'Users that contributed to a facet. Used to associate multiple users to a facet.', to=settings.AUTH_USER_MODEL, through='editorial.FacetContributor', blank=True),
        ),
        migrations.AddField(
            model_name='facet',
            name='video_assets',
            field=models.ManyToManyField(to='editorial.VideoAsset', blank=True),
        ),
    ]
