# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.utils.timezone
import django.db.models.deletion
import django.contrib.auth.models
import django.contrib.postgres.fields
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(null=True, verbose_name='last login', blank=True)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=30, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', unique=True, verbose_name='username')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name', blank=True)),
                ('last_name', models.CharField(max_length=30, verbose_name='last name', blank=True)),
                ('email', models.EmailField(max_length=254, verbose_name='email address', blank=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(help_text=b'Type of user.', max_length=25, choices=[(b'Admin', b'Admin'), (b'Editor', b'Editor'), (b'Staff', b'Staff')])),
                ('credit_name', models.CharField(help_text=b'Full name of user as listed as a credit on content.', max_length=75, blank=True)),
                ('title', models.CharField(help_text=b'Professional title', max_length=100, blank=True)),
                ('phone', models.CharField(max_length=20, blank=True)),
                ('bio', models.TextField(help_text=b'Short bio.', blank=True)),
                ('location', models.CharField(max_length=b'255', blank=True)),
                ('expertise', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'Array of user skills and beats to filter/search by.', size=None, base_field=models.CharField(max_length=255), blank=True)),
                ('photo', models.ImageField(upload_to=b'users', blank=True)),
                ('facebook', models.CharField(max_length=250, blank=True)),
                ('twitter', models.CharField(max_length=250, blank=True)),
                ('github', models.CharField(max_length=250, blank=True)),
                ('linkedin', models.CharField(max_length=250, blank=True)),
                ('instagram', models.CharField(max_length=250, blank=True)),
                ('snapchat', models.CharField(max_length=250, blank=True)),
                ('vine', models.CharField(max_length=250, blank=True)),
                ('website', models.CharField(max_length=250, blank=True)),
                ('groups', models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Group', blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', verbose_name='groups')),
            ],
            options={
                'ordering': ['credit_name'],
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AudioFacet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('original_audiofacet', models.BooleanField(default=True, help_text=b'Was this audiofacet originally created by a user from this organization?')),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75, blank=True)),
                ('title', models.TextField(help_text=b'Headline of the audiofacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt for the audiofacet.', blank=True)),
                ('af_description', models.TextField(help_text=b'Description of the audiofacet.', blank=True)),
                ('af_content', models.TextField(help_text=b'Content of the audiofacet.', blank=True)),
                ('length', models.IntegerField(help_text=b'Runtime of the audiofacet.', blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('status', models.CharField(help_text=b'Audiofacet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'Day audiofacet was created.', auto_now_add=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the audiofacet.', blank=True)),
                ('captions', models.TextField(help_text=b'Captions and credits for any assets in use.', blank=True)),
            ],
            options={
                'ordering': ['creation_date'],
                'verbose_name': 'Audiofacet',
                'verbose_name_plural': 'Audiofacets',
            },
        ),
        migrations.CreateModel(
            name='AudioFacetContributor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_role', models.CharField(help_text=b'What did the user do?', max_length=255)),
                ('audiofacet', models.ForeignKey(to='editorial.AudioFacet')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AudioFacetCopyDetail',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('original_audiofacet', models.ForeignKey(related_name='original_audiofacet_detail', to='editorial.AudioFacet', help_text=b'Original copy of the audiofacet.')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('text', models.TextField(help_text=b'The content of the comment.')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CommentReadStatus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('datetime_read', models.DateTimeField(auto_now_add=True)),
                ('has_read', models.BooleanField(default=True)),
                ('comment', models.ForeignKey(to='editorial.Comment')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('discussion_type', models.CharField(help_text=b'What kind of discussion is it.', max_length=25, choices=[(b'ORG', b'Organization Conversation'), (b'NET', b'Network Conversation'), (b'PRI', b'Private Conversation'), (b'SER', b'Series Conversation'), (b'STO', b'Story Conversation'), (b'WF', b'WebFacet Conversation'), (b'PF', b'PrintFacet Conversation'), (b'AF', b'AudioFacet Conversation'), (b'VF', b'VideoFacet Conversation')])),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalAudioFacet',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('original_audiofacet', models.BooleanField(default=True, help_text=b'Was this audiofacet originally created by a user from this organization?')),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75, blank=True)),
                ('title', models.TextField(help_text=b'Headline of the audiofacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt for the audiofacet.', blank=True)),
                ('af_description', models.TextField(help_text=b'Description of the audiofacet.', blank=True)),
                ('af_content', models.TextField(help_text=b'Content of the audiofacet.', blank=True)),
                ('length', models.IntegerField(help_text=b'Runtime of the audiofacet.', blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('status', models.CharField(help_text=b'Audiofacet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'Day audiofacet was created.', editable=False, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the audiofacet.', blank=True)),
                ('captions', models.TextField(help_text=b'Captions and credits for any assets in use.', blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('discussion', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Discussion', null=True)),
                ('editor', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Audiofacet',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPrintFacet',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('original_printfacet', models.BooleanField(default=True, help_text=b'Was this printfacet originally created by a user from this organization?')),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75, blank=True)),
                ('title', models.TextField(help_text=b'Headline of the printfacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the printfacet.', blank=True)),
                ('pf_description', models.TextField(help_text=b'Description of the printfacet.', blank=True)),
                ('pf_content', models.TextField(help_text=b'Content of the printfacet.', blank=True)),
                ('length', models.IntegerField(help_text=b'Length of the printfacet.', blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('status', models.CharField(help_text=b'Printfacet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'Day printfacet was created.', editable=False, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the printfacet.', blank=True)),
                ('captions', models.TextField(help_text=b'Captions and credits for any assets in use.', blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('discussion', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Discussion', null=True)),
                ('editor', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Printfacet',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVideoFacet',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('original_videofacet', models.BooleanField(default=True, help_text=b'Was this videofacet originally created by a user from this organization?')),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75, blank=True)),
                ('title', models.TextField(help_text=b'Headline of the videofacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the videofacet.', blank=True)),
                ('vf_description', models.TextField(help_text=b'Description of the videofacet.', blank=True)),
                ('vf_content', models.TextField(help_text=b'Content of the videofacet.', blank=True)),
                ('length', models.IntegerField(help_text=b'Runtime of the videofacet.', blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('status', models.CharField(help_text=b'Videofacet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'Day videofacet was created.', editable=False, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the videofacet.', blank=True)),
                ('captions', models.TextField(help_text=b'Captions and credits for any assets in use.', blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('discussion', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Discussion', null=True)),
                ('editor', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Videofacet',
            },
        ),
        migrations.CreateModel(
            name='HistoricalWebFacet',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('original_webfacet', models.BooleanField(default=True, help_text=b'Was this webfacet originally created by a user from this organization?')),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75, blank=True)),
                ('title', models.TextField(help_text=b'Headline of the Webfacet')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the Webfacet.', blank=True)),
                ('wf_description', models.TextField(help_text=b'Description of the WebFacet.', blank=True)),
                ('wf_content', models.TextField(help_text=b'Content of the webFacet.', blank=True)),
                ('length', models.IntegerField(help_text=b'Length of the webfacet.', blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('status', models.CharField(help_text=b'WebFacet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'Day WebFacet was created.', editable=False, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the webfacet.', blank=True)),
                ('captions', models.TextField(help_text=b'Captions and credits for any assets in use.', blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('discussion', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Discussion', null=True)),
                ('editor', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Webfacet',
            },
        ),
        migrations.CreateModel(
            name='ImageAsset',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('original', models.BooleanField(default=True, help_text=b'This content originally belonged to this organization.')),
                ('asset_title', models.CharField(help_text=b'Text for file name. Name it intuitively.', max_length=200, blank=True)),
                ('asset_description', models.TextField(help_text=b'What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300, blank=True)),
                ('attribution', models.TextField(help_text=b'The appropriate information for crediting the asset.', max_length=200, blank=True)),
                ('photo', models.ImageField(upload_to=b'photos', blank=True)),
                ('image_type', models.CharField(help_text=b'What kind of image.', max_length=20, choices=[(b'PIC', b'Photograph'), (b'GRAPH', b'Graphic')])),
                ('creation_date', models.DateTimeField(help_text=b'When the asset was created.', auto_now_add=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(help_text=b'The name by which members identify the network.', max_length=75, db_index=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('network_description', models.TextField(help_text=b'Short description of a network.', blank=True)),
                ('logo', models.ImageField(upload_to=b'networks', blank=True)),
                ('discussion', models.ForeignKey(related_name='network_discussion', blank=True, to='editorial.Discussion', help_text=b'Id of discussion for a network.', null=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Network',
                'verbose_name_plural': 'Networks',
            },
        ),
        migrations.CreateModel(
            name='NetworkNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField(help_text=b'Content of the note', blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'When the note was created.', auto_now_add=True)),
                ('important', models.BooleanField(default=False, help_text=b'Mark as important for pinning to top of notes')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for note search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('network', models.ForeignKey(related_name='networknote_network', to='editorial.Network')),
                ('owner', models.ForeignKey(related_name='networknote_owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=75, db_index=True)),
                ('org_description', models.TextField(help_text=b'Short profile of organization.', blank=True)),
                ('logo', models.ImageField(upload_to=b'organizations', blank=True)),
                ('location', models.CharField(max_length=b'255', blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('facebook', models.CharField(max_length=250, blank=True)),
                ('twitter', models.CharField(max_length=250, blank=True)),
                ('website', models.CharField(max_length=250, blank=True)),
                ('discussion', models.ForeignKey(related_name='organization_discussion', blank=True, to='editorial.Discussion', help_text=b'Id of discussion for an organization.', null=True)),
                ('owner', models.ForeignKey(related_name='organization_owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='OrganizationNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField(help_text=b'Content of the note', blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'When the note was created.', auto_now_add=True)),
                ('important', models.BooleanField(default=False, help_text=b'Mark as important for pinning to top of notes')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for note search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('organization', models.ForeignKey(related_name='orgnote_org', to='editorial.Organization')),
                ('owner', models.ForeignKey(related_name='organizationnote_owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrintFacet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('original_printfacet', models.BooleanField(default=True, help_text=b'Was this printfacet originally created by a user from this organization?')),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75, blank=True)),
                ('title', models.TextField(help_text=b'Headline of the printfacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the printfacet.', blank=True)),
                ('pf_description', models.TextField(help_text=b'Description of the printfacet.', blank=True)),
                ('pf_content', models.TextField(help_text=b'Content of the printfacet.', blank=True)),
                ('length', models.IntegerField(help_text=b'Length of the printfacet.', blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('status', models.CharField(help_text=b'Printfacet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'Day printfacet was created.', auto_now_add=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the printfacet.', blank=True)),
                ('captions', models.TextField(help_text=b'Captions and credits for any assets in use.', blank=True)),
            ],
            options={
                'ordering': ['creation_date'],
                'verbose_name': 'Printfacet',
                'verbose_name_plural': 'Printfacets',
            },
        ),
        migrations.CreateModel(
            name='PrintFacetContributor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_role', models.CharField(help_text=b'What did the user do?', max_length=255)),
                ('printfacet', models.ForeignKey(to='editorial.PrintFacet')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PrintFacetCopyDetail',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('original_org', models.ForeignKey(related_name='original_printfacet_organization', to='editorial.Organization', help_text=b'Organization that originally created the content.')),
                ('original_printfacet', models.ForeignKey(related_name='original_printfacet_detail', to='editorial.PrintFacet', help_text=b'Original copy of the printfacet.')),
                ('partner', models.ForeignKey(related_name='printfacet_copying_organization', to='editorial.Organization', help_text=b'Organization that made the copy.')),
                ('partner_printfacet', models.ForeignKey(related_name='printfacet_copy', to='editorial.PrintFacet', help_text=b'The new version of the printfacet saved by the partner organization.')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateDiscussion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('discussion', models.ForeignKey(to='editorial.Discussion')),
                ('users', models.ManyToManyField(related_name='private_discussion_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PrivateMessage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('subject', models.TextField(help_text=b'The topic of the message.', blank=True)),
                ('text', models.TextField(help_text=b'The content of the message.')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('discussion', models.ForeignKey(to='editorial.Discussion')),
                ('recipient', models.ForeignKey(related_name='private_message_recipient', to=settings.AUTH_USER_MODEL, help_text=b'The recipient of the private message.')),
                ('user', models.ForeignKey(related_name='private_message_sender', to=settings.AUTH_USER_MODEL, help_text=b'The sender of the private message.')),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(help_text=b'The name identifying the series.', max_length=75)),
                ('series_description', models.TextField(help_text=b'Short description of a series.', blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('sensitivity', models.BooleanField(default=False, help_text=b'Is a series sensitive, for limited viewing?')),
                ('share', models.BooleanField(default=False, help_text=b'The series is being shared with a network.')),
                ('share_with_date', models.DateTimeField(help_text=b'Estimated date the series will be available', null=True, blank=True)),
                ('collaborate', models.BooleanField(default=False, help_text=b'The series is being collaborated on with a network.')),
                ('archived', models.BooleanField(default=False, help_text=b'Is the content no longer active and needed?')),
                ('collaborate_with', models.ManyToManyField(help_text=b'Organization ids that a series is open to collaboration with.', related_name='series_collaborated_with_organization', to='editorial.Organization', blank=True)),
                ('discussion', models.ForeignKey(blank=True, to='editorial.Discussion', help_text=b'Id of planning discussion for a series.', null=True)),
                ('organization', models.ForeignKey(related_name='series_organization', to='editorial.Organization', help_text=b'The org')),
                ('owner', models.ForeignKey(related_name='series_owner', to=settings.AUTH_USER_MODEL, help_text=b'The user that created the series.')),
                ('share_with', models.ManyToManyField(help_text=b'Network ids that a series is shared with.', related_name='series_shared_with_network', to='editorial.Network', blank=True)),
                ('team', models.ManyToManyField(help_text=b'User contributing to the series.', related_name='series_team_member', to=settings.AUTH_USER_MODEL, blank=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Series',
                'verbose_name_plural': 'Series',
            },
        ),
        migrations.CreateModel(
            name='SeriesCopyDetail',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('original_org', models.ForeignKey(related_name='original_series_organization', to='editorial.Organization', help_text=b'Organization that originally created the content.')),
                ('original_series', models.ForeignKey(related_name='original_series_detail', to='editorial.Series', help_text=b'Original copy of the series.')),
                ('partner', models.ForeignKey(related_name='series_copying_organization', to='editorial.Organization', help_text=b'Organization that made the copy.')),
                ('partner_series', models.ForeignKey(related_name='series_copy', to='editorial.Series', help_text=b'The new version of the series saved by the partner organization.')),
            ],
        ),
        migrations.CreateModel(
            name='SeriesNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField(help_text=b'Content of the note', blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'When the note was created.', auto_now_add=True)),
                ('important', models.BooleanField(default=False, help_text=b'Mark as important for pinning to top of notes')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for note search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('owner', models.ForeignKey(related_name='seriesnote_owner', to=settings.AUTH_USER_MODEL)),
                ('series', models.ForeignKey(related_name='seriesnote', to='editorial.Series')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('original_story', models.BooleanField(default=True, help_text=b'Was this story originally created by a user from this organization?')),
                ('name', models.CharField(help_text=b'The name by which the story is identified', max_length=250)),
                ('story_description', models.TextField(help_text=b'Short description of a story.', blank=True)),
                ('embargo', models.BooleanField(default=False, help_text=b'Is a story embargoed?')),
                ('embargo_datetime', models.DateTimeField(help_text=b'When is the story no longer under embargo.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'When was the story created.', auto_now_add=True)),
                ('sensitive', models.BooleanField(default=False, help_text=b'Is a story sensitive and viewing it limited only to the team working on it?')),
                ('share', models.BooleanField(default=False, help_text=b'The story is being shared with a network.')),
                ('share_with_date', models.DateTimeField(help_text=b'Estimated date the story will be available', null=True, blank=True)),
                ('ready_to_share', models.BooleanField(default=False, help_text=b'The story is finished and ready to be copied.')),
                ('collaborate', models.BooleanField(default=False, help_text=b'The story is being collaborated on with a network.')),
                ('archived', models.BooleanField(default=False, help_text=b'Is the content no longer active and needed?')),
                ('collaborate_with', models.ManyToManyField(help_text=b'Organization ids that a series is open to collaboration with.', related_name='story_collaborated_with_organization', to='editorial.Organization', blank=True)),
                ('discussion', models.ForeignKey(blank=True, to='editorial.Discussion', help_text=b'Id of planning discussion for a story.', null=True)),
                ('organization', models.ForeignKey(help_text=b'Organization that owns this story.', to='editorial.Organization')),
                ('owner', models.ForeignKey(related_name='story_owner', to=settings.AUTH_USER_MODEL, help_text=b'User who created the story')),
                ('series', models.ForeignKey(blank=True, to='editorial.Series', null=True)),
                ('share_with', models.ManyToManyField(help_text=b'Network ids that a story is shared with.', related_name='story_shared_with_network', null=True, to='editorial.Network', blank=True)),
                ('team', models.ManyToManyField(help_text=b'User contributing to the story.', related_name='story_team_member', to=settings.AUTH_USER_MODEL, blank=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
            },
        ),
        migrations.CreateModel(
            name='StoryCopyDetail',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('original_org', models.ForeignKey(related_name='original_story_organization', to='editorial.Organization', help_text=b'Organization that originally created the content.')),
                ('original_story', models.ForeignKey(related_name='original_story_detail', to='editorial.Story', help_text=b'Original copy of the story.')),
                ('partner', models.ForeignKey(related_name='story_copying_organization', to='editorial.Organization', help_text=b'Organization that made the copy.')),
                ('partner_story', models.ForeignKey(related_name='story_copy', to='editorial.Story', help_text=b'The new version of the story saved by the partner organization.')),
            ],
        ),
        migrations.CreateModel(
            name='StoryNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField(help_text=b'Content of the note', blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'When the note was created.', auto_now_add=True)),
                ('important', models.BooleanField(default=False, help_text=b'Mark as important for pinning to top of notes')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for note search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('owner', models.ForeignKey(related_name='storynote_owner', to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(to='editorial.Story')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField(help_text=b'Content of the note', blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'When the note was created.', auto_now_add=True)),
                ('important', models.BooleanField(default=False, help_text=b'Mark as important for pinning to top of notes')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for note search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('owner', models.ForeignKey(related_name='usernote_owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VideoFacet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('original_videofacet', models.BooleanField(default=True, help_text=b'Was this videofacet originally created by a user from this organization?')),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75, blank=True)),
                ('title', models.TextField(help_text=b'Headline of the videofacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the videofacet.', blank=True)),
                ('vf_description', models.TextField(help_text=b'Description of the videofacet.', blank=True)),
                ('vf_content', models.TextField(help_text=b'Content of the videofacet.', blank=True)),
                ('length', models.IntegerField(help_text=b'Runtime of the videofacet.', blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('status', models.CharField(help_text=b'Videofacet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'Day videofacet was created.', auto_now_add=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the videofacet.', blank=True)),
                ('captions', models.TextField(help_text=b'Captions and credits for any assets in use.', blank=True)),
            ],
            options={
                'ordering': ['creation_date'],
                'verbose_name': 'Videofacet',
                'verbose_name_plural': 'Videofacets',
            },
        ),
        migrations.CreateModel(
            name='VideoFacetContributor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_role', models.CharField(help_text=b'What did the user do?', max_length=255)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('videofacet', models.ForeignKey(to='editorial.VideoFacet')),
            ],
        ),
        migrations.CreateModel(
            name='VideoFacetCopyDetail',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('original_org', models.ForeignKey(related_name='original_videofacet_organization', to='editorial.Organization', help_text=b'Organization that originally created the content.')),
                ('original_videofacet', models.ForeignKey(related_name='original_videofacet_detail', to='editorial.VideoFacet', help_text=b'Original copy of the videofacet.')),
                ('partner', models.ForeignKey(related_name='videofacet_copying_organization', to='editorial.Organization', help_text=b'Organization that made the copy.')),
                ('partner_videofacet', models.ForeignKey(related_name='videofacet_copy', to='editorial.VideoFacet', help_text=b'The new version of the videofacet saved by the partner organization.')),
            ],
        ),
        migrations.CreateModel(
            name='WebFacet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('original_webfacet', models.BooleanField(default=True, help_text=b'Was this webfacet originally created by a user from this organization?')),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75, blank=True)),
                ('title', models.TextField(help_text=b'Headline of the Webfacet')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the Webfacet.', blank=True)),
                ('wf_description', models.TextField(help_text=b'Description of the WebFacet.', blank=True)),
                ('wf_content', models.TextField(help_text=b'Content of the webFacet.', blank=True)),
                ('length', models.IntegerField(help_text=b'Length of the webfacet.', blank=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', size=None, base_field=models.CharField(max_length=100), blank=True)),
                ('status', models.CharField(help_text=b'WebFacet status choice.', max_length=25, choices=[(b'Draft', b'Draft'), (b'Pitch', b'Pitch'), (b'In Progress', b'In Progress'), (b'Edit', b'Edit'), (b'Revision', b'Revision'), (b'Needs Review', b'Needs Review'), (b'Ready', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.', null=True, blank=True)),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.', null=True, blank=True)),
                ('creation_date', models.DateTimeField(help_text=b'Day WebFacet was created.', auto_now_add=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the webfacet.', blank=True)),
                ('captions', models.TextField(help_text=b'Captions and credits for any assets in use.', blank=True)),
            ],
            options={
                'ordering': ['creation_date'],
                'verbose_name': 'Webfacet',
                'verbose_name_plural': 'Webfacets',
            },
        ),
        migrations.CreateModel(
            name='WebFacetContributor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_role', models.CharField(help_text=b'What did the user do?', max_length=255)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('webfacet', models.ForeignKey(to='editorial.WebFacet')),
            ],
        ),
        migrations.CreateModel(
            name='WebFacetCopyDetail',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('original_org', models.ForeignKey(related_name='original_webfacet_organization', to='editorial.Organization', help_text=b'Organization that originally created the content.')),
                ('original_webfacet', models.ForeignKey(related_name='original_webfacet_detail', to='editorial.WebFacet', help_text=b'Original copy of the webfacet.')),
                ('partner', models.ForeignKey(related_name='webfacet_copying_organization', to='editorial.Organization', help_text=b'Organization that made the copy.')),
                ('partner_webfacet', models.ForeignKey(related_name='webfacet_copy', to='editorial.WebFacet', help_text=b'The new version of the webfacet saved by the partner organization.')),
            ],
        ),
        migrations.AddField(
            model_name='webfacet',
            name='contributors',
            field=models.ManyToManyField(help_text=b'Users that contributed to a facet. Used to associate multiple users to a facet.', to=settings.AUTH_USER_MODEL, through='editorial.WebFacetContributor', blank=True),
        ),
        migrations.AddField(
            model_name='webfacet',
            name='credit',
            field=models.ManyToManyField(help_text=b'The full user name(s) to be listed as the credit for the facet.', related_name='webfacetcredit', to=settings.AUTH_USER_MODEL, blank=True),
        ),
        migrations.AddField(
            model_name='webfacet',
            name='discussion',
            field=models.ForeignKey(blank=True, to='editorial.Discussion', help_text=b'Id of edit discussion for the webfacet.', null=True),
        ),
        migrations.AddField(
            model_name='webfacet',
            name='editor',
            field=models.ForeignKey(related_name='webfaceteditor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='webfacet',
            name='image_assets',
            field=models.ManyToManyField(to='editorial.ImageAsset', blank=True),
        ),
        migrations.AddField(
            model_name='webfacet',
            name='organization',
            field=models.ForeignKey(help_text=b'Organization that owns this webfacet.', to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='webfacet',
            name='owner',
            field=models.ForeignKey(related_name='webfacetowner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='webfacet',
            name='story',
            field=models.ForeignKey(related_name='webfacetstory', to='editorial.Story'),
        ),
        migrations.AddField(
            model_name='videofacet',
            name='contributors',
            field=models.ManyToManyField(help_text=b'Users that contributed to a facet. Used to associate multiple users to a facet.', to=settings.AUTH_USER_MODEL, through='editorial.VideoFacetContributor', blank=True),
        ),
        migrations.AddField(
            model_name='videofacet',
            name='credit',
            field=models.ManyToManyField(help_text=b'The full user name(s) to be listed as the credit for the facet.', related_name='videofacetcredit', to=settings.AUTH_USER_MODEL, blank=True),
        ),
        migrations.AddField(
            model_name='videofacet',
            name='discussion',
            field=models.ForeignKey(blank=True, to='editorial.Discussion', help_text=b'ID of edit discussion for the videofacet.', null=True),
        ),
        migrations.AddField(
            model_name='videofacet',
            name='editor',
            field=models.ForeignKey(related_name='videofaceteditor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='videofacet',
            name='image_assets',
            field=models.ManyToManyField(to='editorial.ImageAsset', blank=True),
        ),
        migrations.AddField(
            model_name='videofacet',
            name='organization',
            field=models.ForeignKey(help_text=b'Organization that owns this videofacet.', to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='videofacet',
            name='owner',
            field=models.ForeignKey(related_name='videofacetowner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='videofacet',
            name='story',
            field=models.ForeignKey(related_name='videofacetstory', to='editorial.Story'),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='contributors',
            field=models.ManyToManyField(help_text=b'Users that contributed to a facet. Used to associate multiple users to a facet.', to=settings.AUTH_USER_MODEL, through='editorial.PrintFacetContributor', blank=True),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='credit',
            field=models.ManyToManyField(help_text=b'The full user name(s) to be listed as the credit for the facet.', related_name='printfacetcredit', to=settings.AUTH_USER_MODEL, blank=True),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='discussion',
            field=models.ForeignKey(blank=True, to='editorial.Discussion', help_text=b'Id of edit discussion for the printfacet.', null=True),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='editor',
            field=models.ForeignKey(related_name='printfaceteditor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='image_assets',
            field=models.ManyToManyField(to='editorial.ImageAsset', blank=True),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='organization',
            field=models.ForeignKey(help_text=b'Organization that owns this printfacet.', to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='owner',
            field=models.ForeignKey(related_name='printfacetowner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='story',
            field=models.ForeignKey(related_name='printfacetstory', to='editorial.Story'),
        ),
        migrations.AddField(
            model_name='network',
            name='organizations',
            field=models.ManyToManyField(related_name='network_organization', to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='network',
            name='owner_organization',
            field=models.ForeignKey(help_text=b'Organization that owns the network.', to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='imageasset',
            name='organization',
            field=models.ForeignKey(related_name='image_asset_organization', to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='imageasset',
            name='owner',
            field=models.ForeignKey(related_name='image_asset_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='organization',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='owner',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='story',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='organization',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='owner',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='story',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='organization',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='owner',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='story',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='organization',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='owner',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='story',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True),
        ),
        migrations.AddField(
            model_name='comment',
            name='discussion',
            field=models.ForeignKey(to='editorial.Discussion'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='audiofacetcopydetail',
            name='original_org',
            field=models.ForeignKey(related_name='original_audiofacet_organization', to='editorial.Organization', help_text=b'Organization that originally created the content.'),
        ),
        migrations.AddField(
            model_name='audiofacetcopydetail',
            name='partner',
            field=models.ForeignKey(related_name='audiofacet_copying_organization', to='editorial.Organization', help_text=b'Organization that made the copy.'),
        ),
        migrations.AddField(
            model_name='audiofacetcopydetail',
            name='partner_audiofacet',
            field=models.ForeignKey(related_name='audiofacet_copy', to='editorial.AudioFacet', help_text=b'The new version of the audiofacet saved by the partner organization.'),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='contributors',
            field=models.ManyToManyField(help_text=b'Users that contributed to a facet. Used to associate multiple users to a facet.', to=settings.AUTH_USER_MODEL, through='editorial.AudioFacetContributor', blank=True),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='credit',
            field=models.ManyToManyField(help_text=b'The full user name(s) to be listed as the credit for the facet.', related_name='audiofacetcredit', to=settings.AUTH_USER_MODEL, blank=True),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='discussion',
            field=models.ForeignKey(blank=True, to='editorial.Discussion', help_text=b'Id of edit discussion for the audiofacet.', null=True),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='editor',
            field=models.ForeignKey(related_name='audiofaceteditor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='image_assets',
            field=models.ManyToManyField(to='editorial.ImageAsset', blank=True),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='organization',
            field=models.ForeignKey(help_text=b'Organization that owns this audiofacet.', to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='owner',
            field=models.ForeignKey(related_name='audiofacetowner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='story',
            field=models.ForeignKey(related_name='audiofacetstory', to='editorial.Story'),
        ),
        migrations.AddField(
            model_name='user',
            name='notes',
            field=models.ManyToManyField(related_name='user_note', to='editorial.UserNote', blank=True),
        ),
        migrations.AddField(
            model_name='user',
            name='organization',
            field=models.ForeignKey(blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Permission', blank=True, help_text='Specific permissions for this user.', verbose_name='user permissions'),
        ),
    ]
