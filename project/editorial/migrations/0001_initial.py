# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.contrib.postgres.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('asset_id', models.SlugField(help_text=b'Unique identifier for an asset.', max_length=15, serialize=False, primary_key=True)),
                ('asset_description', models.TextField(help_text=b'What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('asset_attribution', models.TextField(help_text=b'The appropriate information for crediting the asset.', max_length=200)),
                ('asset_s3_link', models.URLField(help_text=b'The item on S3.', max_length=300)),
                ('asset_type', models.CharField(help_text=b'What kind is the asset.', max_length=20, choices=[(b'PIC', b'Photograph'), (b'GRAPH', b'Graphic'), (b'AUD', b'Audio'), (b'VID', b'Video'), (b'DOC', b'Document')])),
                ('asset_creation_date', models.DateTimeField(help_text=b'When the asset was created.', auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AudioFacet',
            fields=[
                ('audiofacet_id', models.SlugField(help_text=b'Unique identifier for audiofacet', max_length=25, serialize=False, primary_key=True)),
                ('contributors', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of users that contributed to a story. Used to associate multiple users to an audiofacet.', base_field=models.CharField(max_length=100), size=None)),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75)),
                ('title', models.TextField(help_text=b'Headline of the audiofacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt for the audiofacet.')),
                ('description', models.TextField(help_text=b'Description of the audiofacet.')),
                ('content', models.TextField(help_text=b'Content of the audiofacet.')),
                ('length', models.IntegerField(help_text=b'Wordcount of the audiofacet.')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', base_field=models.CharField(max_length=100), size=None)),
                ('status', models.CharField(help_text=b'Audiofacet status choice.', max_length=25, choices=[(b'DRFT', b'Draft'), (b'PT', b'Pitch'), (b'IP', b'In Progress'), (b'EDT', b'Edit'), (b'RVN', b'Revision'), (b'RDY', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.')),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.')),
                ('creation_date', models.DateTimeField(help_text=b'Day audiofacet was created.', auto_now_add=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the audiofacet.')),
            ],
        ),
        migrations.CreateModel(
            name='AudioFacetAsset',
            fields=[
                ('audiofacet_asset_id', models.SlugField(help_text=b'Unique identifier for a audiofacet/asset connection.', max_length=15, serialize=False, primary_key=True)),
                ('asset_id', models.ForeignKey(to='editorial.Asset')),
                ('audiofacet_id', models.ForeignKey(to='editorial.AudioFacet')),
            ],
        ),
        migrations.CreateModel(
            name='AudioFacetContributors',
            fields=[
                ('audiofacet_contributor_id', models.SlugField(help_text=b'Unique identifier for a audiofacet/contributor connection.', max_length=15, serialize=False, primary_key=True)),
                ('audiofacet_id', models.ForeignKey(to='editorial.AudioFacet')),
            ],
        ),
        migrations.CreateModel(
            name='AudioFacetCopyDetails',
            fields=[
                ('copy_details_id', models.SlugField(help_text=b'Unique identifier for a story copy detail object.', max_length=15, serialize=False, primary_key=True)),
                ('new_id', models.SlugField(help_text=b"Id of the story on the copying organization's site.", max_length=15)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.SlugField(help_text=b'Unique identifier for a comment.', max_length=25, serialize=False, primary_key=True)),
                ('text', models.TextField(help_text=b'The comment of the comment.')),
                ('comment_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommentReadStatus',
            fields=[
                ('read_status_id', models.SlugField(help_text=b'Unique identifier for a comment read status.', max_length=25, serialize=False, primary_key=True)),
                ('datetime_read', models.DateTimeField(auto_now_add=True)),
                ('has_read', models.BooleanField(default=True)),
                ('comment_id', models.ForeignKey(to='editorial.Comment')),
            ],
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('discussion_id', models.SlugField(help_text=b'Unique identifier for a discussion.', max_length=15, serialize=False, primary_key=True)),
                ('discussion_type', models.CharField(help_text=b'What kind of discussion is it.', max_length=25, choices=[(b'PRI', b'Private Conversation'), (b'SER', b'Series Conversation'), (b'STO', b'Story Conversation'), (b'WF', b'WebFacet Conversation'), (b'PF', b'PrintFacet Conversation'), (b'AF', b'AudioFacet Conversation'), (b'VF', b'VideoFacet Conversation')])),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalAudioFacet',
            fields=[
                ('audiofacet_id', models.SlugField(help_text=b'Unique identifier for audiofacet', max_length=25)),
                ('contributors', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of users that contributed to a story. Used to associate multiple users to an audiofacet.', base_field=models.CharField(max_length=100), size=None)),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75)),
                ('title', models.TextField(help_text=b'Headline of the audiofacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt for the audiofacet.')),
                ('description', models.TextField(help_text=b'Description of the audiofacet.')),
                ('content', models.TextField(help_text=b'Content of the audiofacet.')),
                ('length', models.IntegerField(help_text=b'Wordcount of the audiofacet.')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', base_field=models.CharField(max_length=100), size=None)),
                ('status', models.CharField(help_text=b'Audiofacet status choice.', max_length=25, choices=[(b'DRFT', b'Draft'), (b'PT', b'Pitch'), (b'IP', b'In Progress'), (b'EDT', b'Edit'), (b'RVN', b'Revision'), (b'RDY', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.')),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.')),
                ('creation_date', models.DateTimeField(help_text=b'Day audiofacet was created.', editable=False, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the audiofacet.')),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical audio facet',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPrintFacet',
            fields=[
                ('printfacet_id', models.SlugField(help_text=b'Unique identifier for printfacet', max_length=25)),
                ('contributors', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of users that contributed to a story. Used to associate multiple users to a printfacet.', base_field=models.CharField(max_length=100), size=None)),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75)),
                ('title', models.TextField(help_text=b'Headline of the printfacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the printfacet.')),
                ('description', models.TextField(help_text=b'Description of the printfacet.')),
                ('content', models.TextField(help_text=b'Content of the printfacet.')),
                ('length', models.IntegerField(help_text=b'Wordcount of the printfacet.')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', base_field=models.CharField(max_length=100), size=None)),
                ('status', models.CharField(help_text=b'Printfacet status choice.', max_length=25, choices=[(b'DRFT', b'Draft'), (b'PT', b'Pitch'), (b'IP', b'In Progress'), (b'EDT', b'Edit'), (b'RVN', b'Revision'), (b'RDY', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.')),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.')),
                ('creation_date', models.DateTimeField(help_text=b'Day printfacet was created.', editable=False, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the printfacet.')),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical print facet',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVideoFacet',
            fields=[
                ('videofacet_id', models.SlugField(help_text=b'Unique identifier for videofacet', max_length=25)),
                ('contributors', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of users that contributed to a story. Used to associate multiple users to a videofacet.', base_field=models.CharField(max_length=100), size=None)),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75)),
                ('title', models.TextField(help_text=b'Headline of the videofacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the videofacet.')),
                ('description', models.TextField(help_text=b'Description of the videofacet.')),
                ('content', models.TextField(help_text=b'Content of the videofacet.')),
                ('length', models.IntegerField(help_text=b'Wordcount of the videofacet.')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', base_field=models.CharField(max_length=100), size=None)),
                ('status', models.CharField(help_text=b'Videofacet status choice.', max_length=25, choices=[(b'DRFT', b'Draft'), (b'PT', b'Pitch'), (b'IP', b'In Progress'), (b'EDT', b'Edit'), (b'RVN', b'Revision'), (b'RDY', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.')),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.')),
                ('creation_date', models.DateTimeField(help_text=b'Day videofacet was created.', editable=False, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the videofacet.')),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical video facet',
            },
        ),
        migrations.CreateModel(
            name='HistoricalWebFacet',
            fields=[
                ('webfacet_id', models.SlugField(help_text=b'Unique identifier for webfacet', max_length=25)),
                ('contributors', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of users that contributed to a story. Used to associate multiple users to a facet.', base_field=models.CharField(max_length=100), size=None)),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75)),
                ('title', models.TextField(help_text=b'Headline of the Webfacet')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the Webfacet.')),
                ('description', models.TextField(help_text=b'Description of the WebFacet.')),
                ('content', models.TextField(help_text=b'Content of the webFacet.')),
                ('length', models.IntegerField(help_text=b'Wordcount of the WebFacet.')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', base_field=models.CharField(max_length=100), size=None)),
                ('status', models.CharField(help_text=b'WebFacet status choice.', max_length=25, choices=[(b'DRFT', b'Draft'), (b'PT', b'Pitch'), (b'IP', b'In Progress'), (b'EDT', b'Edit'), (b'RVN', b'Revision'), (b'RDY', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.')),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.')),
                ('creation_date', models.DateTimeField(help_text=b'Day WebFacet was created.', editable=False, blank=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the webfacet.')),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical web facet',
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('network_id', models.SlugField(help_text=b'Unique identifier for a network', max_length=15, serialize=False, primary_key=True)),
                ('network_name', models.CharField(help_text=b'The name by which members identify the network.', max_length=75, db_index=True)),
                ('network_creation_date', models.DateTimeField(auto_now_add=True)),
                ('network_description', models.TextField(help_text=b'Short description of a network.', blank=True)),
                ('network_logo', models.ImageField(upload_to=b'organizations', blank=True)),
            ],
            options={
                'ordering': ['network_name'],
                'verbose_name': 'Network',
                'verbose_name_plural': 'Networks',
            },
        ),
        migrations.CreateModel(
            name='NetworkOrganizaton',
            fields=[
                ('network_organization_id', models.SlugField(help_text=b'Unique identifier for a network/organization connection.', max_length=15, serialize=False, primary_key=True)),
                ('network_id', models.ForeignKey(to='editorial.Network')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('organization_id', models.SlugField(help_text=b'Unique code for an organization.', max_length=15, serialize=False, primary_key=True)),
                ('organization_name', models.CharField(max_length=75, db_index=True)),
                ('organization_description', models.TextField(help_text=b'Short profile of organization.', blank=True)),
                ('organization_creation_date', models.DateTimeField(auto_now_add=True)),
                ('organization_logo', models.ImageField(upload_to=b'organizations', blank=True)),
            ],
            options={
                'ordering': ['organization_name'],
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='PrintFacet',
            fields=[
                ('printfacet_id', models.SlugField(help_text=b'Unique identifier for printfacet', max_length=25, serialize=False, primary_key=True)),
                ('contributors', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of users that contributed to a story. Used to associate multiple users to a printfacet.', base_field=models.CharField(max_length=100), size=None)),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75)),
                ('title', models.TextField(help_text=b'Headline of the printfacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the printfacet.')),
                ('description', models.TextField(help_text=b'Description of the printfacet.')),
                ('content', models.TextField(help_text=b'Content of the printfacet.')),
                ('length', models.IntegerField(help_text=b'Wordcount of the printfacet.')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', base_field=models.CharField(max_length=100), size=None)),
                ('status', models.CharField(help_text=b'Printfacet status choice.', max_length=25, choices=[(b'DRFT', b'Draft'), (b'PT', b'Pitch'), (b'IP', b'In Progress'), (b'EDT', b'Edit'), (b'RVN', b'Revision'), (b'RDY', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.')),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.')),
                ('creation_date', models.DateTimeField(help_text=b'Day printfacet was created.', auto_now_add=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the printfacet.')),
            ],
        ),
        migrations.CreateModel(
            name='PrintFacetAsset',
            fields=[
                ('printfacet_asset_id', models.SlugField(help_text=b'Unique identifier for a printfacet/asset connection.', max_length=15, serialize=False, primary_key=True)),
                ('asset_id', models.ForeignKey(to='editorial.Asset')),
                ('printfacet_id', models.ForeignKey(to='editorial.PrintFacet')),
            ],
        ),
        migrations.CreateModel(
            name='PrintFacetContributors',
            fields=[
                ('printfacet_contributor_id', models.SlugField(help_text=b'Unique identifier for a printfacet/contributor connection.', max_length=15, serialize=False, primary_key=True)),
                ('printfacet_id', models.ForeignKey(to='editorial.PrintFacet')),
            ],
        ),
        migrations.CreateModel(
            name='PrintFacetCopyDetails',
            fields=[
                ('copy_details_id', models.SlugField(help_text=b'Unique identifier for a story copy detail object.', max_length=15, serialize=False, primary_key=True)),
                ('new_id', models.SlugField(help_text=b"Id of the story on the copying organization's site.", max_length=15)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('organization_id', models.ForeignKey(help_text=b'Id of the organization that made the copy.', to='editorial.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateDiscussion',
            fields=[
                ('private_discussion_id', models.SlugField(help_text=b'Unique identifier of a private discussion', max_length=15, serialize=False, primary_key=True)),
                ('users', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'Array of users participating in a private conversation.', base_field=models.CharField(max_length=100), size=None)),
                ('discussion_id', models.ForeignKey(to='editorial.Discussion')),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('series_id', models.SlugField(help_text=b'Unique identifier for a series.', max_length=15, serialize=False, primary_key=True)),
                ('series_name', models.CharField(help_text=b'The name identifying the series.', max_length=75)),
                ('series_description', models.TextField(help_text=b'Short description of a series.', blank=True)),
                ('series_creation_date', models.DateTimeField(auto_now_add=True)),
                ('share', models.BooleanField(default=False, help_text=b'The series is being shared with a network.')),
                ('collaborate', models.BooleanField(default=False, help_text=b'The series is being collaborated on with a network.')),
                ('shared_with', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'Array of the network ids that a series is shared with.', base_field=models.CharField(max_length=100), size=None)),
                ('collaborate_with', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'Array of the network ids that a series is open to collaboration with.', base_field=models.CharField(max_length=100), size=None)),
            ],
            options={
                'ordering': ['series_name'],
                'verbose_name': 'Series',
                'verbose_name_plural': 'Series',
            },
        ),
        migrations.CreateModel(
            name='SeriesCopyDetails',
            fields=[
                ('copy_details_id', models.SlugField(help_text=b'Unique identifier for a series copy detail object.', max_length=15, serialize=False, primary_key=True)),
                ('new_id', models.SlugField(help_text=b"Id of the series on the copying organization's site.", max_length=15)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('organization_id', models.ForeignKey(help_text=b'Id of the organization that made the copy.', to='editorial.Organization')),
                ('original_id', models.ForeignKey(help_text=b'Original id of the series.', to='editorial.Series')),
            ],
        ),
        migrations.CreateModel(
            name='SeriesPlan',
            fields=[
                ('series_planning_id', models.SlugField(help_text=b'Unique identifier for a series plan.', max_length=15, serialize=False, primary_key=True)),
                ('series_plan_note', models.TextField(help_text=b'Notes for planning a series. Can be any details needed to be tracked while a series is planned/reported.')),
                ('series_discussion_id', models.ForeignKey(to='editorial.Discussion')),
                ('series_id', models.ForeignKey(to='editorial.Series')),
            ],
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('story_id', models.SlugField(help_text=b'unique identifier for a story', max_length=15, serialize=False, primary_key=True)),
                ('story_name', models.CharField(help_text=b'The name by which the story is identified', max_length=250)),
                ('story_description', models.TextField(help_text=b'Short description of a story.', blank=True)),
                ('story_embargo', models.BooleanField(default=False, help_text=b'Is a story embargoed?')),
                ('story_embargo_datetime', models.DateTimeField(help_text=b'When is the story no longer under embargo.')),
                ('story_sensitivity', models.BooleanField(default=False, help_text=b'Is a story sensitive, for limited viewing?')),
                ('story_creation_date', models.DateTimeField(help_text=b'When was the story created.', auto_now_add=True)),
                ('story_team', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'Array of user_ids that participated in a story.', base_field=models.CharField(max_length=100), size=None)),
                ('share', models.BooleanField(default=False, help_text=b'The story is being shared with a network.')),
                ('collaborate', models.BooleanField(default=False, help_text=b'The story is being collaborated on with a network.')),
                ('shared_with', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'Array of the network ids that a story is shared with.', base_field=models.CharField(max_length=100), size=None)),
                ('collaborate_with', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'Array of the network ids that a story is open to collaboration with.', base_field=models.CharField(max_length=100), size=None)),
                ('series_id', models.ForeignKey(to='editorial.Series')),
            ],
            options={
                'ordering': ['story_name'],
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
            },
        ),
        migrations.CreateModel(
            name='StoryCopyDetails',
            fields=[
                ('copy_details_id', models.SlugField(help_text=b'Unique identifier for a story copy detail object.', max_length=15, serialize=False, primary_key=True)),
                ('new_id', models.SlugField(help_text=b"Id of the story on the copying organization's site.", max_length=15)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('organization_id', models.ForeignKey(help_text=b'Id of the organization that made the copy.', to='editorial.Organization')),
                ('original_id', models.ForeignKey(help_text=b'Original id of the story.', to='editorial.Series')),
            ],
        ),
        migrations.CreateModel(
            name='StoryPlan',
            fields=[
                ('story_planning_id', models.SlugField(help_text=b'Unique identifier for a story plan.', max_length=15, serialize=False, primary_key=True)),
                ('story_plan_note', models.TextField(help_text=b'Notes for planning a story. Can be any details needed to be tracked while a story is planned/reported.')),
                ('story_discussion_id', models.ForeignKey(to='editorial.Discussion')),
                ('story_id', models.ForeignKey(to='editorial.Story')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.SlugField(help_text=b'Unique code for a user.', max_length=15, serialize=False, primary_key=True)),
                ('user_admin_privilege', models.BooleanField(default=False, help_text=b'Is a user able to manage an organization/network and make/remove users.')),
                ('user_fname', models.CharField(max_length=45, db_index=True)),
                ('user_lname', models.CharField(max_length=45, db_index=True)),
                ('user_credit_name', models.CharField(help_text=b'Full name of user as listed as a credit on content.', max_length=75)),
                ('username', models.CharField(help_text=b'Username as needed for login purposes.', unique=True, max_length=30)),
                ('user_title', models.CharField(help_text=b'Professional title', unique=True, max_length=100)),
                ('user_date_joined', models.DateTimeField(auto_now_add=True)),
                ('user_last_login', models.DateTimeField(auto_now=True)),
                ('user_is_active', models.BooleanField(default=True)),
                ('email', models.EmailField(max_length=254, blank=True)),
                ('phone', models.CharField(max_length=20, blank=True)),
                ('bio', models.TextField(help_text=b'Short bio.', blank=True)),
                ('user_expertise', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'Array of user skills and beats to filter/search by.', base_field=models.CharField(max_length=100), size=None)),
                ('profile_photo', models.ImageField(upload_to=b'users', blank=True)),
                ('user_facebook', models.CharField(max_length=150)),
                ('user_twitter', models.CharField(max_length=150)),
                ('user_linkedin', models.CharField(max_length=150)),
                ('user_instagram', models.CharField(max_length=150)),
                ('user_snapchat', models.CharField(max_length=150)),
                ('user_vine', models.CharField(max_length=150)),
                ('user_organization_id', models.ForeignKey(to='editorial.Organization')),
            ],
            options={
                'ordering': ['user_credit_name'],
                'verbose_name': 'Team member',
                'verbose_name_plural': 'Team members',
            },
        ),
        migrations.CreateModel(
            name='UserSeries',
            fields=[
                ('user_series_id', models.SlugField(help_text=b'Unique identifier for a user/series connection.', max_length=15, serialize=False, primary_key=True)),
                ('series_id', models.ForeignKey(to='editorial.Series')),
                ('user_id', models.ForeignKey(to='editorial.User')),
            ],
        ),
        migrations.CreateModel(
            name='UserStory',
            fields=[
                ('user_story_id', models.SlugField(help_text=b'Unique identifier for a user/story connection.', max_length=15, serialize=False, primary_key=True)),
                ('story_id', models.ForeignKey(to='editorial.Story')),
                ('user_id', models.ForeignKey(to='editorial.User')),
            ],
        ),
        migrations.CreateModel(
            name='VideoFacet',
            fields=[
                ('videofacet_id', models.SlugField(help_text=b'Unique identifier for videofacet', max_length=25, serialize=False, primary_key=True)),
                ('contributors', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of users that contributed to a story. Used to associate multiple users to a videofacet.', base_field=models.CharField(max_length=100), size=None)),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75)),
                ('title', models.TextField(help_text=b'Headline of the videofacet.')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the videofacet.')),
                ('description', models.TextField(help_text=b'Description of the videofacet.')),
                ('content', models.TextField(help_text=b'Content of the videofacet.')),
                ('length', models.IntegerField(help_text=b'Wordcount of the videofacet.')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', base_field=models.CharField(max_length=100), size=None)),
                ('status', models.CharField(help_text=b'Videofacet status choice.', max_length=25, choices=[(b'DRFT', b'Draft'), (b'PT', b'Pitch'), (b'IP', b'In Progress'), (b'EDT', b'Edit'), (b'RVN', b'Revision'), (b'RDY', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.')),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.')),
                ('creation_date', models.DateTimeField(help_text=b'Day videofacet was created.', auto_now_add=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the videofacet.')),
                ('credit', models.ForeignKey(related_name='videofacetcredit', to='editorial.User', help_text=b'The full user name to be listed as the credit for the facet.')),
                ('discussion_id', models.ForeignKey(help_text=b'ID of edit discussion for the videofacet.', to='editorial.Discussion')),
                ('editor', models.ForeignKey(related_name='videofaceteditor', to='editorial.User')),
                ('original_org', models.ForeignKey(to='editorial.Organization')),
                ('owner', models.ForeignKey(related_name='videofacetowner', to='editorial.User')),
                ('story_id', models.ForeignKey(to='editorial.Story')),
            ],
        ),
        migrations.CreateModel(
            name='VideoFacetAsset',
            fields=[
                ('videofacet_asset_id', models.SlugField(help_text=b'Unique identifier for a videofacet/asset connection.', max_length=15, serialize=False, primary_key=True)),
                ('asset_id', models.ForeignKey(to='editorial.Asset')),
                ('videofacet_id', models.ForeignKey(to='editorial.VideoFacet')),
            ],
        ),
        migrations.CreateModel(
            name='VideoFacetContributors',
            fields=[
                ('videofacet_contributor_id', models.SlugField(help_text=b'Unique identifier for a videofacet/contributor connection.', max_length=15, serialize=False, primary_key=True)),
                ('user_id', models.ForeignKey(to='editorial.User')),
                ('videofacet_id', models.ForeignKey(to='editorial.VideoFacet')),
            ],
        ),
        migrations.CreateModel(
            name='VideoFacetCopyDetails',
            fields=[
                ('copy_details_id', models.SlugField(help_text=b'Unique identifier for a story copy detail object.', max_length=15, serialize=False, primary_key=True)),
                ('new_id', models.SlugField(help_text=b"Id of the story on the copying organization's site.", max_length=15)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('organization_id', models.ForeignKey(help_text=b'Id of the organization that made the copy.', to='editorial.Organization')),
                ('original_id', models.ForeignKey(help_text=b'Original id of the story.', to='editorial.Series')),
            ],
        ),
        migrations.CreateModel(
            name='WebFacet',
            fields=[
                ('webfacet_id', models.SlugField(help_text=b'Unique identifier for webfacet', max_length=25, serialize=False, primary_key=True)),
                ('contributors', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of users that contributed to a story. Used to associate multiple users to a facet.', base_field=models.CharField(max_length=100), size=None)),
                ('code', models.CharField(help_text=b'Unique code as needed for ingest sytems. Use as needed', max_length=75)),
                ('title', models.TextField(help_text=b'Headline of the Webfacet')),
                ('excerpt', models.TextField(help_text=b'Excerpt from the Webfacet.')),
                ('description', models.TextField(help_text=b'Description of the WebFacet.')),
                ('content', models.TextField(help_text=b'Content of the webFacet.')),
                ('length', models.IntegerField(help_text=b'Wordcount of the WebFacet.')),
                ('keywords', django.contrib.postgres.fields.ArrayField(default=list, help_text=b'List of keywords for search.', base_field=models.CharField(max_length=100), size=None)),
                ('status', models.CharField(help_text=b'WebFacet status choice.', max_length=25, choices=[(b'DRFT', b'Draft'), (b'PT', b'Pitch'), (b'IP', b'In Progress'), (b'EDT', b'Edit'), (b'RVN', b'Revision'), (b'RDY', b'Ready')])),
                ('due_edit', models.DateTimeField(help_text=b'Due for edit.')),
                ('run_date', models.DateTimeField(help_text=b'Planned run date.')),
                ('creation_date', models.DateTimeField(help_text=b'Day WebFacet was created.', auto_now_add=True)),
                ('share_note', models.TextField(help_text=b'Information for organizations making a copy of the webfacet.')),
                ('credit', models.ForeignKey(related_name='webfacetcredit', to='editorial.User', help_text=b'The full user name to be listed as the credit for the facet.')),
                ('discussion_id', models.ForeignKey(help_text=b'Id of edit discussion for the webfacet.', to='editorial.Discussion')),
                ('editor', models.ForeignKey(related_name='webfaceteditor', to='editorial.User')),
                ('original_org', models.ForeignKey(to='editorial.Organization')),
                ('owner', models.ForeignKey(related_name='webfacetowner', to='editorial.User')),
                ('story_id', models.ForeignKey(to='editorial.Story')),
            ],
        ),
        migrations.CreateModel(
            name='WebFacetAsset',
            fields=[
                ('webfacet_asset_id', models.SlugField(help_text=b'Unique identifier for a webfacet/asset connection.', max_length=15, serialize=False, primary_key=True)),
                ('asset_id', models.ForeignKey(to='editorial.Asset')),
                ('webfacet_id', models.ForeignKey(to='editorial.WebFacet')),
            ],
        ),
        migrations.CreateModel(
            name='WebFacetContributors',
            fields=[
                ('webfacet_contributor_id', models.SlugField(help_text=b'Unique identifier for a webfacet/contributor connection.', max_length=15, serialize=False, primary_key=True)),
                ('user_id', models.ForeignKey(to='editorial.User')),
                ('webfacet_id', models.ForeignKey(to='editorial.WebFacet')),
            ],
        ),
        migrations.CreateModel(
            name='WebFacetCopyDetails',
            fields=[
                ('copy_details_id', models.SlugField(help_text=b'Unique identifier for a story copy detail object.', max_length=15, serialize=False, primary_key=True)),
                ('new_id', models.SlugField(help_text=b"Id of the story on the copying organization's site.", max_length=15)),
                ('copy_date', models.DateTimeField(help_text=b'Datetime when copy was made.', auto_now_add=True)),
                ('organization_id', models.ForeignKey(help_text=b'Id of the organization that made the copy.', to='editorial.Organization')),
                ('original_id', models.ForeignKey(help_text=b'Original id of the story.', to='editorial.Series')),
            ],
        ),
        migrations.AddField(
            model_name='storyplan',
            name='story_plan_note_owner',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='story',
            name='story_owner',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='seriesplan',
            name='series_plan_note_owner',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='series',
            name='series_owner',
            field=models.ForeignKey(help_text=b'The user that created the series.', to='editorial.User'),
        ),
        migrations.AddField(
            model_name='printfacetcopydetails',
            name='original_id',
            field=models.ForeignKey(help_text=b'Original id of the story.', to='editorial.Series'),
        ),
        migrations.AddField(
            model_name='printfacetcontributors',
            name='user_id',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='credit',
            field=models.ForeignKey(related_name='printfacetcredit', to='editorial.User', help_text=b'The full user name to be listed as the credit for the facet.'),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='discussion_id',
            field=models.ForeignKey(help_text=b'Id of edit discussion for the printfacet.', to='editorial.Discussion'),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='editor',
            field=models.ForeignKey(related_name='printfaceteditor', to='editorial.User'),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='original_org',
            field=models.ForeignKey(to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='owner',
            field=models.ForeignKey(related_name='printfacetowner', to='editorial.User'),
        ),
        migrations.AddField(
            model_name='printfacet',
            name='story_id',
            field=models.ForeignKey(to='editorial.Story'),
        ),
        migrations.AddField(
            model_name='organization',
            name='organization_owner',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='networkorganizaton',
            name='organization_id',
            field=models.ForeignKey(to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='network',
            name='network_owner_organization',
            field=models.ForeignKey(to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='credit',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='discussion_id',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Discussion', null=True),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='editor',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='history_user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='original_org',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='owner',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalwebfacet',
            name='story_id',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='credit',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='discussion_id',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Discussion', null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='editor',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='history_user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='original_org',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='owner',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalvideofacet',
            name='story_id',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='credit',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='discussion_id',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Discussion', null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='editor',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='history_user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='original_org',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='owner',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalprintfacet',
            name='story_id',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='credit',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='discussion_id',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Discussion', null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='editor',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='history_user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='original_org',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Organization', null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='owner',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.User', null=True),
        ),
        migrations.AddField(
            model_name='historicalaudiofacet',
            name='story_id',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='editorial.Story', null=True),
        ),
        migrations.AddField(
            model_name='commentreadstatus',
            name='user_id',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='comment',
            name='discussion_id',
            field=models.ForeignKey(to='editorial.Discussion'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user_id',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='audiofacetcopydetails',
            name='organization_id',
            field=models.ForeignKey(help_text=b'Id of the organization that made the copy.', to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='audiofacetcopydetails',
            name='original_id',
            field=models.ForeignKey(help_text=b'Original id of the story.', to='editorial.Series'),
        ),
        migrations.AddField(
            model_name='audiofacetcontributors',
            name='user_id',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='credit',
            field=models.ForeignKey(related_name='audiofacetcredit', to='editorial.User', help_text=b'The full user name to be listed as the credit for the facet.'),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='discussion_id',
            field=models.ForeignKey(help_text=b'Id of edit discussion for the audiofacet.', to='editorial.Discussion'),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='editor',
            field=models.ForeignKey(related_name='audiofaceteditor', to='editorial.User'),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='original_org',
            field=models.ForeignKey(to='editorial.Organization'),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='owner',
            field=models.ForeignKey(related_name='audiofacetowner', to='editorial.User'),
        ),
        migrations.AddField(
            model_name='audiofacet',
            name='story_id',
            field=models.ForeignKey(to='editorial.Story'),
        ),
        migrations.AddField(
            model_name='asset',
            name='asset_owner',
            field=models.ForeignKey(to='editorial.User'),
        ),
        migrations.AddField(
            model_name='asset',
            name='series_id',
            field=models.ForeignKey(to='editorial.Series'),
        ),
    ]
